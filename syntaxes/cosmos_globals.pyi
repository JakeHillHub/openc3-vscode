"""
This file is auto-generated by the openc3 extension to provide intellisense
NOTE: any modifications to this file will not persist between vscode plugin loads
"""

from typing import Any, overload, List, Dict, Tuple, Optional

# Define the 'cmd' function signature
def cmd(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a command through the COSMOS system.
    """
    ...

# Define the 'cmd_no_range_check' function signature
def cmd_no_range_check(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a command through the COSMOS system with no range check.
    """
    ...

# Define the 'cmd_no_hazardous_check' function signature
def cmd_no_hazardous_check(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a command through the COSMOS system with no hazardous check.
    """
    ...

# Define the 'cmd_no_checks' function signature
def cmd_no_checks(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a command through the COSMOS system with no checks.
    """
    ...

# Define the 'cmd_raw' function signature
def cmd_raw(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a raw command through the COSMOS system.
    """
    ...

# Define the 'cmd_raw_no_range_check' function signature
def cmd_raw_no_range_check(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a raw command through the COSMOS system with no range check.
    """
    ...

# Define the 'cmd_raw_no_hazardous_check' function signature
def cmd_raw_no_hazardous_check(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a raw command through the COSMOS system with no hazardous check.
    """
    ...

# Define the 'cmd_raw_no_checks' function signature
def cmd_raw_no_checks(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a raw command through the COSMOS system with no checks.
    """
    ...

# --- Command Building & Sending ---

def build_cmd(cmd_string: str, range_check: bool = True, raw: bool = False) -> Dict[str, Any]:
    """
    Builds a command binary string to see the raw bytes for a given command.
    """
    ...

def send_raw(interface_name: str, data: bytes) -> None:
    """
    Sends raw data on an interface.
    """
    ...

# --- Command State ---

@overload
def enable_cmd(cmd_string: str) -> None: ...
@overload
def enable_cmd(target_name: str, command_name: str) -> None: ...
def enable_cmd(*args) -> None:
    """
    Enables a disabled command.
    """
    ...

@overload
def disable_cmd(cmd_string: str) -> None: ...
@overload
def disable_cmd(target_name: str, command_name: str) -> None: ...
def disable_cmd(*args) -> None:
    """
    Disables a command.
    """
    ...

# --- Command Information ---

def get_all_cmds(target_name: str) -> List[Dict[str, Any]]:
    """
    Returns a list of dicts which fully describe the command packets for a target.
    """
    ...

def get_all_cmd_names(target_name: str) -> List[str]:
    """
    Returns a list of the command names for a particular target.
    """
    ...

@overload
def get_cmd(cmd_string: str) -> Dict[str, Any]: ...
@overload
def get_cmd(target_name: str, packet_name: str) -> Dict[str, Any]: ...
def get_cmd(*args) -> Dict[str, Any]:
    """
    Returns a dict which fully describes a command packet.
    """
    ...

@overload
def get_param(param_string: str) -> Dict[str, Any]: ...
@overload
def get_param(target_name: str, command_name: str, param_name: str) -> Dict[str, Any]: ...
def get_param(*args) -> Dict[str, Any]:
    """
    Returns a dict of the given command parameter.
    """
    ...

@overload
def get_cmd_buffer(cmd_string: str) -> Dict[str, Any]: ...
@overload
def get_cmd_buffer(target_name: str, packet_name: str) -> Dict[str, Any]: ...
def get_cmd_buffer(*args) -> Dict[str, Any]:
    """
    Returns a packet dict along with the raw packet buffer.
    """
    ...

def get_cmd_hazardous(target_name: str, command_name: str, params: Optional[Dict[str, Any]] = None) -> bool:
    """
    Returns true/false indicating whether a particular command is flagged as hazardous.
    """
    ...

# --- Command Telemetry ---

def get_cmd_value(target_name: str, command_name: str, param_name: str, value_type: Optional[str] = None) -> Any:
    """
    Reads a value from the most recently sent command packet.
    """
    ...

def get_cmd_time(target_name: Optional[str] = None, command_name: Optional[str] = None) -> Tuple[str, str, Any]:
    """
    Returns the time of the most recent command sent.
    """
    ...

@overload
def get_cmd_cnt(cmd_string: str) -> int: ...
@overload
def get_cmd_cnt(target_name: str, command_name: str) -> int: ...
def get_cmd_cnt(*args) -> int:
    """
    Returns the number of times a specified command has been sent.
    """
    ...

def get_cmd_cnts(commands: List[List[str]]) -> int:
    """
    Returns the number of times the specified commands have been sent.
    """
    ...

# --- Critical Command Handling ---

def critical_cmd_status(uuid: str) -> str:
    """
    Returns the status of a critical command (APPROVED, REJECTED, or WAITING).
    """
    ...

def critical_cmd_approve(uuid: str) -> None:
    """
    Approves the critical command as the current user.
    """
    ...

def critical_cmd_reject(uuid: str) -> None:
    """
    Rejects the critical command as the current user.
    """
    ...

def critical_cmd_can_approve(uuid: str) -> bool:
    """
    Returns whether the current user can approve the critical command.
    """
    ...

# --- Command Queue Management ---

def queue_create(queue_name: str) -> None:
    """
    Creates a command queue, initially in the HOLD state.
    """
    ...

def queue_get(queue_name: str) -> Dict[str, Any]:
    """
    Gets information about a command queue, including its state.
    """
    ...

def queue_all() -> List[Dict[str, Any]]:
    """
    Gets information about all command queues.
    """
    ...

def queue_list(queue_name: str) -> List[Dict[str, Any]]:
    """

    Lists all commands in the queue, including username, creation time, and the command itself.
    """
    ...

def queue_hold(queue_name: str) -> None:
    """
    Puts the specified queue into HOLD mode.
    """
    ...

def queue_release(queue_name: str) -> None:
    """
    Puts the specified queue into RELEASE mode.
    """
    ...

def queue_disable(queue_name: str) -> None:
    """
    Puts the specified queue into DISABLE mode.
    """
    ...

def queue_exec(queue_name: str, index: Optional[int] = None) -> None:
    """
    Removes a command from the queue and executes it.
    If no index is given, the first command is executed.
    """
    ...

def queue_delete(queue_name: str) -> None:
    """
    Deletes the specified queue and any commands that it holds.
    """
    ...

# Define the 'tlm' function signature
def tlm(packet: str, item: str) -> Any:
    """
    Retrieves telemetry from the COSMOS system.
    """
    ...

# Add any other globally injected functions here
# def wait(seconds: float) -> None: ...
