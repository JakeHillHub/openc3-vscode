"""
This file is auto-generated by the openc3 extension to provide intellisense
NOTE: any modifications to this file will not persist between vscode plugin loads
"""

from typing import Any, overload, List, Dict, Tuple, Optional, IO

# Define the 'cmd' function signature
def cmd(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a command through the COSMOS system.
    """
    ...

# Define the 'cmd_no_range_check' function signature
def cmd_no_range_check(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a command through the COSMOS system with no range check.
    """
    ...

# Define the 'cmd_no_hazardous_check' function signature
def cmd_no_hazardous_check(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a command through the COSMOS system with no hazardous check.
    """
    ...

# Define the 'cmd_no_checks' function signature
def cmd_no_checks(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a command through the COSMOS system with no checks.
    """
    ...

# Define the 'cmd_raw' function signature
def cmd_raw(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a raw command through the COSMOS system.
    """
    ...

# Define the 'cmd_raw_no_range_check' function signature
def cmd_raw_no_range_check(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a raw command through the COSMOS system with no range check.
    """
    ...

# Define the 'cmd_raw_no_hazardous_check' function signature
def cmd_raw_no_hazardous_check(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a raw command through the COSMOS system with no hazardous check.
    """
    ...

# Define the 'cmd_raw_no_checks' function signature
def cmd_raw_no_checks(target: str, command: str, params: dict[str, Any]) -> None:
    """
    Sends a raw command through the COSMOS system with no checks.
    """
    ...

# --- Command Building & Sending ---

def build_cmd(cmd_string: str, range_check: bool = True, raw: bool = False) -> Dict[str, Any]:
    """
    Builds a command binary string to see the raw bytes for a given command.
    """
    ...

def send_raw(interface_name: str, data: bytes) -> None:
    """
    Sends raw data on an interface.
    """
    ...

# --- Command State ---

@overload
def enable_cmd(cmd_string: str) -> None: ...
@overload
def enable_cmd(target_name: str, command_name: str) -> None: ...
def enable_cmd(*args) -> None:
    """
    Enables a disabled command.
    """
    ...

@overload
def disable_cmd(cmd_string: str) -> None: ...
@overload
def disable_cmd(target_name: str, command_name: str) -> None: ...
def disable_cmd(*args) -> None:
    """
    Disables a command.
    """
    ...

# --- Command Information ---

def get_all_cmds(target_name: str) -> List[Dict[str, Any]]:
    """
    Returns a list of dicts which fully describe the command packets for a target.
    """
    ...

def get_all_cmd_names(target_name: str) -> List[str]:
    """
    Returns a list of the command names for a particular target.
    """
    ...

@overload
def get_cmd(cmd_string: str) -> Dict[str, Any]: ...
@overload
def get_cmd(target_name: str, packet_name: str) -> Dict[str, Any]: ...
def get_cmd(*args) -> Dict[str, Any]:
    """
    Returns a dict which fully describes a command packet.
    """
    ...

@overload
def get_param(param_string: str) -> Dict[str, Any]: ...
@overload
def get_param(target_name: str, command_name: str, param_name: str) -> Dict[str, Any]: ...
def get_param(*args) -> Dict[str, Any]:
    """
    Returns a dict of the given command parameter.
    """
    ...

@overload
def get_cmd_buffer(cmd_string: str) -> Dict[str, Any]: ...
@overload
def get_cmd_buffer(target_name: str, packet_name: str) -> Dict[str, Any]: ...
def get_cmd_buffer(*args) -> Dict[str, Any]:
    """
    Returns a packet dict along with the raw packet buffer.
    """
    ...

def get_cmd_hazardous(target_name: str, command_name: str, params: Optional[Dict[str, Any]] = None) -> bool:
    """
    Returns true/false indicating whether a particular command is flagged as hazardous.
    """
    ...

# --- Command Telemetry ---

def get_cmd_value(target_name: str, command_name: str, param_name: str, value_type: Optional[str] = None) -> Any:
    """
    Reads a value from the most recently sent command packet.
    """
    ...

def get_cmd_time(target_name: Optional[str] = None, command_name: Optional[str] = None) -> Tuple[str, str, Any]:
    """
    Returns the time of the most recent command sent.
    """
    ...

@overload
def get_cmd_cnt(cmd_string: str) -> int: ...
@overload
def get_cmd_cnt(target_name: str, command_name: str) -> int: ...
def get_cmd_cnt(*args) -> int:
    """
    Returns the number of times a specified command has been sent.
    """
    ...

def get_cmd_cnts(commands: List[List[str]]) -> int:
    """
    Returns the number of times the specified commands have been sent.
    """
    ...

# --- Critical Command Handling ---

def critical_cmd_status(uuid: str) -> str:
    """
    Returns the status of a critical command (APPROVED, REJECTED, or WAITING).
    """
    ...

def critical_cmd_approve(uuid: str) -> None:
    """
    Approves the critical command as the current user.
    """
    ...

def critical_cmd_reject(uuid: str) -> None:
    """
    Rejects the critical command as the current user.
    """
    ...

def critical_cmd_can_approve(uuid: str) -> bool:
    """
    Returns whether the current user can approve the critical command.
    """
    ...

# --- Command Queue Management ---

def queue_create(queue_name: str) -> None:
    """
    Creates a command queue, initially in the HOLD state.
    """
    ...

def queue_get(queue_name: str) -> Dict[str, Any]:
    """
    Gets information about a command queue, including its state.
    """
    ...

def queue_all() -> List[Dict[str, Any]]:
    """
    Gets information about all command queues.
    """
    ...

def queue_list(queue_name: str) -> List[Dict[str, Any]]:
    """

    Lists all commands in the queue, including username, creation time, and the command itself.
    """
    ...

def queue_hold(queue_name: str) -> None:
    """
    Puts the specified queue into HOLD mode.
    """
    ...

def queue_release(queue_name: str) -> None:
    """
    Puts the specified queue into RELEASE mode.
    """
    ...

def queue_disable(queue_name: str) -> None:
    """
    Puts the specified queue into DISABLE mode.
    """
    ...

def queue_exec(queue_name: str, index: Optional[int] = None) -> None:
    """
    Removes a command from the queue and executes it.
    If no index is given, the first command is executed.
    """
    ...

def queue_delete(queue_name: str) -> None:
    """
    Deletes the specified queue and any commands that it holds.
    """
    ...

# --- Retrieving User Input ---

@overload
def ask(question: str) -> Any: ...
@overload
def ask(question: str, blank_or_default: bool) -> Any: ...
@overload
def ask(question: str, blank_or_default: Any) -> Any: ...
@overload
def ask(question: str, blank_or_default: bool, password: bool) -> Any: ...
def ask(*args) -> Any:
    """
    Prompts the user for input and automatically converts the string to the
    appropriate data type.
    """
    ...

@overload
def ask_string(question: str) -> str: ...
@overload
def ask_string(question: str, blank_or_default: bool) -> str: ...
@overload
def ask_string(question: str, blank_or_default: str) -> str: ...
@overload
def ask_string(question: str, blank_or_default: bool, password: bool) -> str: ...
def ask_string(*args) -> str:
    """
    Prompts the user for input and always returns the input as a string.
    """
    ...

def message_box(message: str, *button_texts: str) -> str:
    """
    Creates a message box with arbitrary buttons and returns the text of the
    button clicked.
    """
    ...

def vertical_message_box(message: str, *button_texts: str) -> str:
    """
    Creates a vertical message box with arbitrary buttons and returns the text
    of the button clicked.
    """
    ...

def combo_box(message: str, *selection_texts: str) -> str:
    """
    Creates a combo box with arbitrary selections and returns the text of the
    selection clicked.
    """
    ...

# --- File Operations ---

def get_target_file(file_path: str, original: bool = False) -> IO:
    """
    Returns a file handle to a file in the target directory.
    """
    ...

def put_target_file(file_path: str, data: str | IO) -> None:
    """
    Writes a file to the target directory.
    """
    ...

def delete_target_file(file_path: str) -> None:
    """
    Deletes a file in the target directory.
    """
    ...

@overload
def open_file_dialog(title: str, message: Optional[str] = None, filter: Optional[str] = None) -> IO: ...
def open_file_dialog(*args, **kwargs) -> IO:
    """
    Creates a file dialog box for the user to select a single file. The selected
    file handle is returned.
    """
    ...

@overload
def open_files_dialog(title: str, message: Optional[str] = None, filter: Optional[str] = None) -> List[IO]: ...
def open_files_dialog(*args, **kwargs) -> List[IO]:
    """
    Creates a file dialog box for the user to select multiple files. A list of
    the selected file handles is returned.
    """
    ...

# --- Providing Information to the User ---

def prompt(message: str) -> None:
    """
    Displays a message to the user and waits for them to press an OK button.
    """
    ...

# Constants for value types
RAW: str = "RAW"
CONVERTED: str = "CONVERTED"
FORMATTED: str = "FORMATTED"
WITH_UNITS: str = "WITH_UNITS"

# --- Handling Telemetry ---

@overload
def check(
    telemetry_item: str,
    comparison: Optional[str] = None,
    type: str = CONVERTED,
) -> None: ...
def check(
    telemetry_item: str,
    comparison: Optional[str] = None,
    type: str = CONVERTED,
) -> None:
    """
    Performs a verification of a telemetry item.
    """
    ...

@overload
def check_raw(telemetry_item: str, comparison: Optional[str] = None) -> None: ...
def check_raw(
    telemetry_item: str, comparison: Optional[str] = None
) -> None:
    """
    Performs a verification of a telemetry item in RAW form.
    """
    ...

@overload
def check_formatted(telemetry_item: str, comparison: Optional[str] = None) -> None: ...
def check_formatted(
    telemetry_item: str, comparison: Optional[str] = None
) -> None:
    """
    Performs a verification of a telemetry item in FORMATTED form.
    """
    ...

@overload
def check_with_units(telemetry_item: str, comparison: Optional[str] = None) -> None: ...
def check_with_units(
    telemetry_item: str, comparison: Optional[str] = None
) -> None:
    """
    Performs a verification of a telemetry item with UNITS.
    """
    ...

def check_tolerance(
    telemetry_item: str,
    expected_value: float,
    tolerance: float,
    type: str = CONVERTED,
) -> None:
    """
    Checks a converted telemetry item against an expected value with a tolerance.
    """
    ...

def check_expression(
    expression_to_evaluate: str, globals: Optional[Dict] = None, locals: Optional[Dict] = None
) -> None:
    """
    Evaluates an expression and pauses the script if it evaluates to false.
    """
    ...

@overload
def check_exception(method_name: str, method_params: Optional[str] = None) -> None: ...
@overload
def check_exception(method_name: str, **kwargs: Any) -> None: ...
def check_exception(*args, **kwargs) -> None:
    """
    Executes a method and expects an exception to be raised.
    """
    ...

@overload
def tlm(telemetry_item: str, type: str = CONVERTED) -> Any: ...
@overload
def tlm(target_name: str, packet_name: str, item_name: str, type: str = CONVERTED) -> Any: ...
def tlm(*args, **kwargs) -> Any:
    """
    Reads the specified form of a telemetry item.
    """
    ...

@overload
def tlm_raw(telemetry_item: str) -> Any: ...
@overload
def tlm_raw(target_name: str, packet_name: str, item_name: str) -> Any: ...
def tlm_raw(*args) -> Any:
    """
    Reads the RAW form of a telemetry item.
    """
    ...

@overload
def tlm_formatted(telemetry_item: str) -> str: ...
@overload
def tlm_formatted(target_name: str, packet_name: str, item_name: str) -> str: ...
def tlm_formatted(*args) -> str:
    """
    Reads the FORMATTED form of a telemetry item.
    """
    ...

@overload
def tlm_with_units(telemetry_item: str) -> str: ...
@overload
def tlm_with_units(target_name: str, packet_name: str, item_name: str) -> str: ...
def tlm_with_units(*args) -> str:
    """
    Reads the WITH_UNITS form of a telemetry item.
    """
    ...


@overload
def get_tlm_buffer(telemetry_packet: str) -> Dict[str, Any]: ...
@overload
def get_tlm_buffer(target_name: str, packet_name: str) -> Dict[str, Any]: ...
def get_tlm_buffer(*args) -> Dict[str, Any]:
    """
    Returns a packet hash along with the raw packet buffer.
    """
    ...

@overload
def get_tlm_packet(telemetry_packet: str, type: str = CONVERTED) -> List[Tuple[str, Any, str]]: ...
@overload
def get_tlm_packet(target_name: str, packet_name: str, type: str = CONVERTED) -> List[Tuple[str, Any, str]]: ...
def get_tlm_packet(*args, **kwargs) -> List[Tuple[str, Any, str]]:
    """
    Returns the names, values, and limits states of all telemetry items in a specified packet.
    """
    ...

def get_tlm_available(items: List[str]) -> List[str]:
    """
    Returns the actual items available based on the specified set of telemetry items.
    """
    ...

def get_tlm_values(items: List[str]) -> Tuple[List[Any], List[str], List[Any], List[str]]:
    """
    Returns the values and current limits state for a specified set of telemetry items.
    """
    ...

def get_all_tlm(target_name: str) -> List[Dict[str, Any]]:
    """
    Returns an array of all target packet hashes.
    """
    ...

def get_all_tlm_names(target_name: str) -> List[str]:
    """
    Returns an array of all target packet names.
    """
    ...

def get_all_tlm_item_names(target_name: str) -> List[str]:
    """
    Returns all the item names for every packet in a target.
    """
    ...

@overload
def get_tlm(telemetry_packet: str) -> Dict[str, Any]: ...
@overload
def get_tlm(target_name: str, packet_name: str) -> Dict[str, Any]: ...
def get_tlm(*args) -> Dict[str, Any]:
    """
    Returns a packet hash.
    """
    ...

@overload
def get_item(telemetry_item: str) -> Dict[str, Any]: ...
@overload
def get_item(target_name: str, packet_name: str, item_name: str) -> Dict[str, Any]: ...
def get_item(*args) -> Dict[str, Any]:
    """
    Returns an item hash.
    """
    ...

@overload
def get_tlm_cnt(telemetry_packet: str) -> int: ...
@overload
def get_tlm_cnt(target_name: str, packet_name: str) -> int: ...
def get_tlm_cnt(*args) -> int:
    """
    Returns the number of times a specified telemetry packet has been received.
    """
    ...

@overload
def set_tlm(telemetry_item_with_value: str, type: str = CONVERTED) -> None: ...
def set_tlm(telemetry_item_with_value: str, type: str = CONVERTED) -> None:
    """
    Sets a telemetry item value in the Command and Telemetry Server.
    """
    ...

@overload
def inject_tlm(target_name: str, packet_name: str, item_hash: Optional[Dict] = None, type: str = CONVERTED) -> None: ...
def inject_tlm(target_name: str, packet_name: str, item_hash: Optional[Dict] = None, type: str = CONVERTED) -> None:
    """
    Injects a packet into the system.
    """
    ...

@overload
def override_tlm(telemetry_item_with_value: str, type: str = "ALL") -> None: ...
def override_tlm(telemetry_item_with_value: str, type: str = "ALL") -> None:
    """
    Sets the converted value for a telemetry point and maintains it.
    """
    ...

@overload
def normalize_tlm(telemetry_item: str, type: str = "ALL") -> None: ...
def normalize_tlm(telemetry_item: str, type: str = "ALL") -> None:
    """
    Clears the override of a telemetry point.
    """
    ...

def get_overrides() -> List[Dict[str, Any]]:
    """
    Returns an array of the currently overridden values.
    """
    ...

# Add any other globally injected functions here
# def wait(seconds: float) -> None: ...
